

/******************************************************************************
 *  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
 *  Lab 2: Autocomplete
 ******************************************************************************/

Name of lab group: Lab group 95
Group member A:    Dino Pasalic
Group member B:    Rasmus Rosengren


/******************************************************************************
 *  How many hours did you spend on the assignment?
 *****************************************************************************/

Group member A:    7 hours
Group member B:    7 hours


/******************************************************************************
 *  Describe how your firstIndexOf() method in RangeBinarySearch.java
 *  finds the first index of a key that equals the search key.
 *****************************************************************************/

First it binary searches to find one matching element. Then it uses a modified 
binary search to find the lower edge of the matching elements. It does this by
moving the "high index" down (closer to the edge) if the "middle index" element 
is equal to the "high index". The search is finished when the low and high indices
are equal or one space apart.

/******************************************************************************
 *  What is the worst case time complexity in the number of compares
 *  that each of the operations in the Autocomplete data type make,
 *  as a function of the number of terms n and the number of matching terms m?
 *
 *  You can answer in O() notation, or in order-of-growth notation.
 *  Recall that in both notations you should discard leading coefficients
 *  and lower-order terms, e.g., m^2 + m log n.
 *****************************************************************************/

constructor:  O(n log n)

The constructor sorts the input array using Arrays.sort, which under the hood uses
a TimSort, which has a worst case complexity of O(n log n)

allMatches(): O(log n + m log m)

allMatches uses two binary searches with worst case complexity O(log n) and then uses
Arrays.sort to sort the matched terms, which as described above, has a worst case complexity of O(m log m)

numberOfMatches(): O(log n)

numberOfMatches uses two binary searches, which have a worst case complexity of O(log n)

/******************************************************************************
 *  Are there any known bugs / limitations?
 *****************************************************************************/

It does not support case insensitive searching, it also does not yet support
fuzzy search

/******************************************************************************
 *  Did you collaborate with any other students on this lab?
 *  If so, please write in what way you collaborated and with whom.
 *  Also include any resources (including the web) that you may
 *  may have used in creating your design.
 *****************************************************************************/

We did discuss with lab group 128 about their solutions so that we could compare 
ours and their soloution to find out which was most efficient. This made it so 
that we got a better understanding of what we were doing and of how it affected 
time spent by each implementation of the algorithm

We also used wikipedia for remind ourselves of the psuedo code implementation
of binary search

/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/

used wrong comparator in autocomplete
sorted the lists in the wrong order causing "invisible errors"

/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/

We think this was a good laboration as it spwaned a lot of discussion about 
algortihms and wasn't too complicated to code which meant there was more room 
to think about the algorithms used
